#!/bin/bash
set -euo pipefail

if ! which qemu-system-aarch64 &>/dev/null; then
    echo "Please install qemu"
    exit 1
fi

source_image="$1"
INIT=${INIT:-}

base_dir=$(mktemp -d)

# Build the helper image
BUILDER_IMAGE=rpi-image-builder:20.04
docker image build --rm --force-rm --tag ${BUILDER_IMAGE} image-builder

# Get the fully resolved path to the temp dir, to work around the docker file sharing restrictions in macOS
base_dir=$(cd "${base_dir}"; pwd -P)

envfile=$(mktemp ${base_dir}/.envfile.XXXXXX)
export -p | grep -v "DISPLAY\|HOME\|HOST=\|LS_COLORS\|PATH\|PERL\|PWD\|SHELL\|SHLVL\|SSH\|TERM\|TMPDIR\|USER" > ${envfile}

trap 'rm -rf "${base_dir}" "${envfile}"' EXIT ERR INT TERM HUP

# Make a copy of the image so that we don't damage the original, or negate any first-boot activites
echo ">>> Copying image"
host_image_path="${base_dir}/test-image.img"
image_file=$(basename "${host_image_path}")
cp "${source_image}" "${host_image_path}"

# Do any fixups necessary in the image and get a copy of the kernel, initrd, etc from the image
echo ">>> Prepping image and extracting kernel"
# Host basedir maps to container_imagedir inside the container
container_imagedir=/work
container_image_path="${container_imagedir}/${image_file}"

docker container run --rm -it --privileged \
                     --mount type=bind,src="${base_dir}",dst="${container_imagedir}" \
                     --mount type=bind,src=${envfile},dst=/tmp/envfile \
                     --mount type=bind,src=$(pwd),dst=/builder \
                     --workdir /builder \
                     ${BUILDER_IMAGE} \
                     image-builder/prep-image-emulation "${container_image_path}" "${container_imagedir}"
boot_image="${host_image_path}"
kernel_file="${base_dir}"/boot/vmlinuz
initrd_file="${base_dir}"/boot/initrd.img
cmdline="rw root=/dev/vda2 console=ttyAMA0 loglevel=8 rootwait fsck.repair=yes memtest=1"
if [[ -n "${INIT}" ]]; then
    cmdline="${cmdline} init=${INIT}"
fi

# Calculate the network for qemu
hostfwd="hostfwd=tcp:127.0.0.1:5522-:22"
if [[ -n "${IP:-}" && -n "${CIDR:-}" ]]; then
    network=$(docker container run --rm -it \
                --mount type=bind,src=$(pwd),dst=/builder \
                ${BUILDER_IMAGE} \
                ipcalc --nocolor --nobinary ${IP}/${CIDR} | grep Network | tr '/' ' ' | awk '{print $2}')
    hostfwd="hostfwd=tcp:127.0.0.1:5522-${IP}:22,net=${network}/${CIDR}"
fi

# Launch qemu to boot the image
echo ">>> Starting Pi"
#qemu-system-aarch64 \
docker container run --rm -it --privileged \
    --volume "${base_dir}":"${base_dir}" \
    qemu-image \
        -name rpi \
        -cpu cortex-a53 \
        -m 1024 \
        -machine virt \
        -nographic \
        -serial mon:stdio \
        -netdev user,id=net0,${hostfwd} \
        -device virtio-net-device,netdev=net0 \
        -drive file="${boot_image}",format=raw,if=sd,id=hd-root \
        -device virtio-blk-device,drive=hd-root \
        -append "${cmdline}" \
        -kernel "${kernel_file}" \
        -initrd "${initrd_file}"
