#!/bin/bash
set -eEuo pipefail
export SHELLOPTS
source image-builder/image.sh

# Import host environment
if [[ -e /tmp/envfile ]]; then
    source /tmp/envfile
fi

source_image="$1"
IP=${IP:-}
CIDR=${CIDR:-}
INIT=${INIT:-}
HOST_QEMU=${HOST_QEMU:-0}
BACKGROUND=${BACKGROUND:-0}
base_dir=/work
CHROOT="${base_dir}"/chroot

mkdir --parents "${CHROOT}"

echo ">>> Copying image"
image_file=test.img
image_path="${base_dir}"/"${image_file}"
cp --sparse=always "${source_image}" "${image_path}"

echo ">>> Getting kernel files from image"
function _clean_mount()
{
    if [[ -n "${CHROOT:-}" ]]; then
        unmount_chroot "${CHROOT}"
    fi
    if [[ -n "${lodev:-}" ]]; then
        unmount_image ${lodev}
        unset lodev
    fi
}
function _error()
{
    # echo "error $?"
    _clean_mount
    exit 1
}
trap _clean_mount EXIT INT TERM HUP
trap _error ERR

mkdir --parents "${CHROOT}"
lodev=$(mount_image "${image_path}")
prepare_chroot "${CHROOT}" ${lodev}
cp --recursive "${CHROOT}"/boot "${base_dir}"/

echo ">>> Patching image for qemu"
# Execute the qemu hooks
export CHROOT
for hook in $(find qemu-hooks -maxdepth 1 -executable -type f -o -type l | sort); do
    echo ">>> Executing qemu hook $(basename ${hook})"
    (
        ${hook}
    ) 2>&1 | sed 's/^/    /'
done
trap - ERR EXIT INT TERM HUP
_clean_mount
rm --recursive --force --one-file-system "${CHROOT}"
unset CHROOT

# Determine options we need to pass to qemu
kernel_file="/boot/vmlinuz"
kernel_path="${base_dir}"/"${kernel_file}"
initrd_file="/boot/initrd.img"
initrd_path="${base_dir}"/"${initrd_file}"
cmdline="rw root=/dev/vda2 loglevel=8 rootwait fsck.repair=yes memtest=1"
if [[ -n "${INIT}" ]]; then
    cmdline="${cmdline} init=${INIT}"
fi

cmdline="${cmdline} console=ttyAMA0"

if [[ ${BACKGROUND} -eq 1 ]]; then
    console_opt="-daemonize -monitor none -serial file:vm_console"
else
    console_opt="-nographic -serial mon:stdio"
fi

# Calculate the network for qemu
hostfwd="hostfwd=tcp:127.0.0.1:5522-:22"
if [[ -n "${IP}" && -n "${CIDR}" ]]; then
    network=$(ipcalc --nocolor --nobinary ${IP}/${CIDR} | grep Network | tr '/' ' ' | awk '{print $2}')
    hostfwd="hostfwd=tcp:127.0.0.1:5522-${IP}:22,net=${network}/${CIDR}"
fi

qemu_cmd='qemu-system-aarch64 \
    -name rpi \
    -cpu cortex-a53 \
    -m 1024 \
    -machine virt \
    ${console_opt} \
    -netdev user,id=net0,${hostfwd} \
    -device virtio-net-device,netdev=net0 \
    -pidfile "${pidfile}" \
    -drive file="${image_path}",format=raw,if=sd,id=hd-root \
    -device virtio-blk-device,drive=hd-root \
    -append "${cmdline}" \
    -kernel "${kernel_path}" \
    -initrd "${initrd_path}"'

if [[ ${HOST_QEMU} -eq 0 ]]; then
    echo ">>> Starting Pi"
    pidfile="$(mktemp)"
    eval "${qemu_cmd}"
else
    # Export the config to be run natively on the host
    declare -p image_file >> "${base_dir}"/qemu_env
    declare -p kernel_file >> "${base_dir}"/qemu_env
    declare -p initrd_file >> "${base_dir}"/qemu_env
    declare -p console_opt >> "${base_dir}"/qemu_env
    declare -p cmdline >> "${base_dir}"/qemu_env
    declare -p hostfwd >> "${base_dir}"/qemu_env

    declare -p qemu_cmd >> "${base_dir}"/qemu_cmd
fi
