#!/bin/bash
set -eEuo pipefail
export SHELLOPTS

BUILDER_IMAGE=$(cat .image-name)

# Detect if qemu is installed on the host
if [[ -z ${HOST_QEMU:-} ]]; then
    which qemu-system-aarch64 &>/dev/null && HOST_QEMU=1 || HOST_QEMU=0;
fi
export HOST_QEMU

# Build the helper image
docker image build --rm --force-rm --tag ${BUILDER_IMAGE} image-builder

#base_dir="artifacts/qemu-boot-${uuid}"
base_dir="$(mktemp -d)"
function _remove_basedir()
{
    rm -rf "${base_dir}"
}

function _error()
{
    # echo "error $?"
    _remove_basedir
    exit 1
}

trap _remove_basedir EXIT INT TERM HUP
trap _error ERR

mkdir -p "${base_dir}"
base_dir="$(cd "${base_dir}"; pwd -P)" # Make sure we have a fully resolved and absolute path for docker
if [[ "${base_dir}" == "$(pwd)" ]]; then 
    exit 1
fi

envfile=$(mktemp "${base_dir}"/.envfile.XXXXXX)
export -p | grep -v "DISPLAY\|HOME\|HOST=\|LS_COLORS\|PATH\|PERL\|PWD\|SHELL\|SHLVL\|SSH\|TERM\|TMPDIR\|USER=" > ${envfile}

docker container run --rm -it --privileged \
                     --name rpi-boot-image-$(uuidgen) \
                     --mount type=bind,src="${envfile}",dst=/tmp/envfile,consistency=delegated \
                     --mount type=bind,src="${base_dir}",dst=/work,consistency=delegated \
                     --mount type=bind,src=$(pwd),dst=/builder,consistency=delegated \
                     --workdir /builder \
                     --publish 127.0.0.1:5522:5522 \
                     ${BUILDER_IMAGE} \
                     image-builder/run-image-qemu "${1}"

if [[ ${HOST_QEMU} -eq 1 ]]; then
    source "${base_dir}"/qemu_env
    pidfile="$(mktemp "${base_dir}"/pidfile.XXXXXX)"
    kernel_path="${base_dir}"/"${kernel_file}"
    initrd_path="${base_dir}"/"${initrd_file}"
    image_path="${base_dir}"/"${image_file}"

    source "${base_dir}"/qemu_cmd

    echo ">>> Starting Pi"
    echo "    VM base dir=${base_dir}"
    eval "${qemu_cmd}"
fi
